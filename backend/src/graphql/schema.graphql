type Query {
    projects: [Project!]
    users: [User!]
    get_project(projectID: ID!): Project!
    get_user(userID: ID!) :User!
}

type Mutation {
    createProject(nombre:String!, descripcion:String!, obj_gen:String!
    obj_esp: [String], presupuesto: Float,
<<<<<<< HEAD
    f_inicial:String, f_final:String, estado:String!, usuarios:[ProjectUserInput], 
=======
    f_inicio:String, f_final:String, estado:String!, usuarios:[ProjectUserInput], 
>>>>>>> development
    observaciones: [ObservationAuthorInput]): Project

    createUser(nombre:String!, email:String!, password:String!, celular:String, carrera:String) : User

    editProject(_id:ID!,nombre:String, descripcion:String, obj_gen:String
    obj_esp: [String], presupuesto: Float,
    f_inicial:String, f_final:String, estado:String!, usuarios:[ProjectUserInput], 
    observaciones: [ObservationAuthorInput]): Project

    deleteProject(projectID: ID!) : Project!

    editUser(_id: ID!,nombre:String, email:String, celular:String, carrera:String) : User!

    deleteUser(userID: ID!) : User!

}

type User {
   _id: ID!
   nombre: String!
   email: String!
   celular: String
   carrera: String
   proyectos: [ID] 
}

type Project {
    _id: ID!
    nombre: String!
    descripcion: String
    obj_gen: String!
    obj_esp: [String]
    presupuesto: Float!
<<<<<<< HEAD
    f_inicial: String
=======
    f_inicio: String
>>>>>>> development
    f_final: String
    estado: String!
    usuarios: [ProjectUser]
    observaciones: [ObservationAuthor]
}

type ProjectUser {
<<<<<<< HEAD
    userId: ID
    nombre: String
    f_ingreso: String
    f_salida: String
=======
    userId: ID!
    nombre: String!
    f_ingreso: String
    f_final: String
>>>>>>> development
    rol: String
    h_trabajo: Int
    carrera: String
}

input ProjectUserInput {
    userId: ID!
    nombre: String!
    fecha_ingreso: String
    fecha_salida: String
    rol: String
    horas: Int
    carrera: String
}

type ObservationAuthor {
    autorId: ID!
    texto: String!
    fecha: String!
}

input ObservationAuthorInput {
    autorId: ID!
    texto: String!
    fecha: String!
}


